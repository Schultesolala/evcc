// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/evcc-io/evcc/api (interfaces: Charger,CurrentController,PowerController,PhaseSwitcher)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	api "github.com/evcc-io/evcc/api"
	gomock "github.com/golang/mock/gomock"
)

// MockCharger is a mock of Charger interface.
type MockCharger struct {
	ctrl     *gomock.Controller
	recorder *MockChargerMockRecorder
}

// MockChargerMockRecorder is the mock recorder for MockCharger.
type MockChargerMockRecorder struct {
	mock *MockCharger
}

// NewMockCharger creates a new mock instance.
func NewMockCharger(ctrl *gomock.Controller) *MockCharger {
	mock := &MockCharger{ctrl: ctrl}
	mock.recorder = &MockChargerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharger) EXPECT() *MockChargerMockRecorder {
	return m.recorder
}

// Enable mocks base method.
func (m *MockCharger) Enable(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockChargerMockRecorder) Enable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockCharger)(nil).Enable), arg0)
}

// Enabled mocks base method.
func (m *MockCharger) Enabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enabled indicates an expected call of Enabled.
func (mr *MockChargerMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockCharger)(nil).Enabled))
}

// Status mocks base method.
func (m *MockCharger) Status() (api.ChargeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(api.ChargeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockChargerMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockCharger)(nil).Status))
}

// MockCurrentController is a mock of CurrentController interface.
type MockCurrentController struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentControllerMockRecorder
}

// MockCurrentControllerMockRecorder is the mock recorder for MockCurrentController.
type MockCurrentControllerMockRecorder struct {
	mock *MockCurrentController
}

// NewMockCurrentController creates a new mock instance.
func NewMockCurrentController(ctrl *gomock.Controller) *MockCurrentController {
	mock := &MockCurrentController{ctrl: ctrl}
	mock.recorder = &MockCurrentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentController) EXPECT() *MockCurrentControllerMockRecorder {
	return m.recorder
}

// MaxCurrent mocks base method.
func (m *MockCurrentController) MaxCurrent(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxCurrent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MaxCurrent indicates an expected call of MaxCurrent.
func (mr *MockCurrentControllerMockRecorder) MaxCurrent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxCurrent", reflect.TypeOf((*MockCurrentController)(nil).MaxCurrent), arg0)
}

// MockPowerController is a mock of PowerController interface.
type MockPowerController struct {
	ctrl     *gomock.Controller
	recorder *MockPowerControllerMockRecorder
}

// MockPowerControllerMockRecorder is the mock recorder for MockPowerController.
type MockPowerControllerMockRecorder struct {
	mock *MockPowerController
}

// NewMockPowerController creates a new mock instance.
func NewMockPowerController(ctrl *gomock.Controller) *MockPowerController {
	mock := &MockPowerController{ctrl: ctrl}
	mock.recorder = &MockPowerControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPowerController) EXPECT() *MockPowerControllerMockRecorder {
	return m.recorder
}

// MaxPower mocks base method.
func (m *MockPowerController) MaxPower(arg0 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxPower", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MaxPower indicates an expected call of MaxPower.
func (mr *MockPowerControllerMockRecorder) MaxPower(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxPower", reflect.TypeOf((*MockPowerController)(nil).MaxPower), arg0)
}

// MockPhaseSwitcher is a mock of PhaseSwitcher interface.
type MockPhaseSwitcher struct {
	ctrl     *gomock.Controller
	recorder *MockPhaseSwitcherMockRecorder
}

// MockPhaseSwitcherMockRecorder is the mock recorder for MockPhaseSwitcher.
type MockPhaseSwitcherMockRecorder struct {
	mock *MockPhaseSwitcher
}

// NewMockPhaseSwitcher creates a new mock instance.
func NewMockPhaseSwitcher(ctrl *gomock.Controller) *MockPhaseSwitcher {
	mock := &MockPhaseSwitcher{ctrl: ctrl}
	mock.recorder = &MockPhaseSwitcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhaseSwitcher) EXPECT() *MockPhaseSwitcherMockRecorder {
	return m.recorder
}

// Phases1p3p mocks base method.
func (m *MockPhaseSwitcher) Phases1p3p(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Phases1p3p", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Phases1p3p indicates an expected call of Phases1p3p.
func (mr *MockPhaseSwitcherMockRecorder) Phases1p3p(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Phases1p3p", reflect.TypeOf((*MockPhaseSwitcher)(nil).Phases1p3p), arg0)
}
